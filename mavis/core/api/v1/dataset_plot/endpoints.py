from fastapi import APIRouter, Depends

from core import utils
from core.api.auth import get_mavis
from core.api.customer_facing.datasets.utils import DatasetManager
from core.errors import SilenceError
from core.logger import get_logger
from core.v4.block import Block
from core.v4.createDataset import UIKindEnum, apply_row_shortcut
from core.v4.dataset_comp.query.util import Dataset
from core.v4.datasetPlotter import DatasetPlot, _map_data
from core.v4.mavis import Mavis

from .models import (
    AntVPlotOutput,
    DrillIntoInput,
    DrillIntoOutput,
    LoadPlotInput,
    LoadPlotOutput,
    RunPlotInput,
)

logger = get_logger()
router = APIRouter(prefix="/dataset/plot", tags=["dataset"])


@router.post("/run", response_model=AntVPlotOutput)
async def run_plot(input: RunPlotInput, mavis: Mavis = Depends(get_mavis)):
    dataset_obj = input.dataset
    group_slug = input.group_slug
    plot_slug = input.plot_slug

    if not group_slug or not plot_slug or not (input.dataset_slug or dataset_obj):
        raise SilenceError("Missing Inputs")

    if input.dataset_slug:
        dataset_id = DatasetManager(mavis=mavis)._slug_to_id(input.dataset_slug)
    else:
        dataset_id = None

    d_obj = Dataset(mavis, dataset_id, obj=dataset_obj)

    # save the group slug
    plot_config = dict(
        dataset=dict(tab_slug=group_slug, plot_slug=plot_slug),
    )

    # create the plot object
    plot = DatasetPlot(plot_config, d_obj)
    plot_data = plot.run_plot()

    return dict(**plot_data.dict(), kpi_locked=False)


@router.post("/load", response_model=LoadPlotOutput)
async def get_plot(input: LoadPlotInput, mavis: Mavis = Depends(get_mavis)):
    # handle loading the config or creating a new config
    if input.dataset_slug:
        dataset_id = DatasetManager(mavis=mavis)._slug_to_id(input.dataset_slug)
    else:
        dataset_id = None

    d_obj = Dataset(mavis, dataset_id, obj=input.dataset)

    if input.plot_slug:
        plot_config = dict(
            dataset=dict(
                tab_slug=input.group_slug,
                plot_slug=input.plot_slug,
            ),
        )

        plot = DatasetPlot(plot_config, d_obj)
        plot.config.dataset.plot_slug = None

        plot_config = plot.config.dict()
        plot_config["dataset"]["tab_slug"] = input.group_slug
        updated_field_slug = "something"

        if input.is_copy:
            plot_config["axes"]["title"] += " COPY"

        # handle plot locks
        if plot_config.get("kpi_locked"):
            raise ValueError("Cannot edit a plot that was auto-generated by the KPI")
    else:
        plot_config = dict(dataset=dict(tab_slug=input.group_slug))
        updated_field_slug = None

    # load the config
    data = dict(requester=dict(email=mavis.user.email), **plot_config, obj=d_obj.obj)
    block = Block(mavis, "dataset_plotter", data)

    # I need to add a something to not let it restart
    block.process_data(updated_field_slug=updated_field_slug)
    return block.update_schema()


def _get_raw_data(dataset: Dataset, group_slug: str, plot_slug: str, plot_row: dict, limit=None):
    logger.debug("getting row", plot_row=plot_row)
    plot_config = dict(dataset=dict(tab_slug=group_slug, plot_slug=plot_slug))

    plot = DatasetPlot(plot_config, dataset)

    # get the cached data
    data = dataset.run(group_slug)

    # map the plot_row to the dataset row
    (row, select_column_id) = _map_data({k: utils.fix_type(v) for k, v in plot_row.items()}, plot.cols, data)

    if row is None:
        raise ValueError("We were not able to map the row to the data")

    # drill into the row
    plan_res = apply_row_shortcut(
        dataset,
        group_slug,
        row,
        select_column_id,
        "find_in_parent_plot",
        None,
    )

    # get the newly created group slug
    desired_group_slug = next(
        g["group_slug"] for g in plan_res["ui_instructions"] if g["kind"] == UIKindEnum.GO_TO_GROUP
    )

    new_d = Dataset(dataset.mavis, obj=plan_res["staged_dataset"])
    # get the table data
    table_data = new_d.run(desired_group_slug)

    return (table_data, plan_res, desired_group_slug)


@router.post("/drill_into", response_model=DrillIntoOutput)
async def drill_into(input: DrillIntoInput, mavis: Mavis = Depends(get_mavis)):
    dataset_id = DatasetManager(mavis=mavis)._slug_to_id(input.dataset_slug)

    d_obj = Dataset(mavis, dataset_id, obj=input.dataset.dict() if input.dataset is not None else None)

    (table_data, plan_res, desired_group_slug) = _get_raw_data(d_obj, input.group_slug, input.plot_slug, input.plot_row)

    current_row_count = table_data.total_rows

    table_data.limit(500)
    return dict(
        table_data=table_data.to_old(),
        current_row_count=current_row_count,
        staged_dataset=plan_res["staged_dataset"],
        new_group_slug=desired_group_slug,
    )
